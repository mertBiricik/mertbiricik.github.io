<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://mert.biricik.de/">
  <title>Mert Biricik's Blog Feed</title>
  <subtitle>The latest posts from Mert Biricik's personal blog on full stack development, data science, and cybersecurity.</subtitle>
  <link href="https://mert.biricik.de//rss.xml" rel="self"/>
  <link href="https://mert.biricik.de//"/>
  <updated>2025-08-11T00:00:00Z</updated>
  <id>https://mert.biricik.de//</id>
  <author>
    <name>Mert Biricik</name>
    <email>mert@biricik.de</email>
  </author>
  <entry>
    <title>Building a Production RAG System: Turkish Basketball Federation AI Assistant</title>
    <link href="https://mert.biricik.de/blog/basketball-rag-system-tutorial/"/>
    <updated>2025-08-11T00:00:00Z</updated>
    <id>https://mert.biricik.de/blog/basketball-rag-system-tutorial/</id>
    <content type="html">&lt;h2&gt;Building a Production RAG System: Turkish Basketball Federation AI Assistant&lt;/h2&gt;
&lt;p&gt;Complete tutorial for deploying a multilingual Retrieval-Augmented Generation system combining basketball rules with live statistics on any Linux system.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;System Overview&lt;/h3&gt;
&lt;p&gt;Production-ready Basketball RAG system with dual-component architecture:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rules Component:&lt;/strong&gt; ChromaDB vector database (873 documents)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Statistics Component:&lt;/strong&gt; FastAPI server (17,261+ games)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Smart Router:&lt;/strong&gt; Query classification and routing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web Interface:&lt;/strong&gt; Gradio production frontend&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Key Features:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bilingual Turkish/English support&lt;/li&gt;
&lt;li&gt;GPU-accelerated embeddings (BGE-M3)&lt;/li&gt;
&lt;li&gt;Llama 3.1 8B integration via Ollama&lt;/li&gt;
&lt;li&gt;External access via localtunnel&lt;/li&gt;
&lt;li&gt;Production error handling and logging&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;System Requirements:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Ubuntu/Debian systems
sudo apt update
sudo apt install python3.8+ python3-pip git curl build-essential

# GPU acceleration (recommended)
# CUDA-capable GPU with 8GB+ VRAM
# RTX 3060/4060 or better
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Core Dependencies:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pip install torch transformers sentence-transformers
pip install chromadb fastapi uvicorn gradio
pip install pandas numpy requests pyyaml tqdm
pip install langchain-community ollama python-docx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Ollama Setup:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install Ollama
curl -fsSL https://ollama.ai/install.sh | sh

# Pull required model
ollama pull llama3.1:8b-instruct-q4_K_M
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3&gt;Project Structure&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;tbf_mhk_rag_mcp/
├── data/                    # CSV game statistics (76 files)
├── documents/              # PDF basketball rules
├── scripts/
│   ├── setup_database.py   # Vector DB initialization  
│   ├── build_stats_db.py   # Statistics DB builder
│   └── gradio_app.py       # Development interface
├── servers/
│   └── stats_api.py        # FastAPI statistics server
├── src/
│   └── utils/
│       ├── config.py       # Hardware detection
│       └── query_router.py # Query classification
├── production_app.py       # Production system
└── Basketball_RAG_Setup_Instructions.md
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3&gt;Step 1: Database Initialization&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Vector Database (Rules):&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Create vector database from PDF documents
python scripts/setup_database.py

# Verify database
# Should output: &amp;quot;✅ Connected to vector database: 873 documents&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Statistics Database (Games):&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Build SQLite database from CSV files
python scripts/build_stats_db.py

# Output: &amp;quot;✅ Database built: 17,261 games processed&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3&gt;Step 2: Query Router Implementation&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Core Router Logic:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class QueryRouter:
    def __init__(self, stats_api_url=&amp;quot;http://localhost:8001&amp;quot;):
        self.stats_keywords = {
            # Turkish: maç, takım, sezon, sonuç, istatistik
            # English: game, team, season, result, statistics
        }
        
        self.team_patterns = [
            r&#39;&#92;b(tofaş|fenerbahçe|galatasaray)&#92;b&#39;,
            r&#39;&#92;b(efes|beşiktaş|trabzonspor)&#92;b&#39;
        ]
    
    def classify_query(self, query: str) -&amp;gt; str:
        # Smart classification logic
        # Returns &#39;stats&#39; or &#39;rules&#39;
        
    def query_stats_api(self, query: str) -&amp;gt; dict:
        # Extract parameters and query API
        # Turkish character encoding handled
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Turkish Character Encoding:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Critical for Turkish team names
params = {&#39;team_name&#39;: &#39;TOFAŞ&#39;}
url = f&amp;quot;{api_url}?{urlencode(params, safe=&#39;&#39;, encoding=&#39;utf-8&#39;)}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3&gt;Step 3: Production System Setup&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Launch Production System:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Single command deployment
python production_app.py

# System startup sequence:
# 🚀 Initializing Production Basketball RAG System...
# 📊 Loading BAAI/bge-m3 on cuda...
# ✅ Vector database: 873 documents
# ✅ Stats API started successfully
# 🎉 Production system ready!
# 🌐 Access at: http://localhost:7860
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Key Production Features:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic service startup&lt;/li&gt;
&lt;li&gt;Port detection and binding&lt;/li&gt;
&lt;li&gt;Error recovery and fallbacks&lt;/li&gt;
&lt;li&gt;Comprehensive logging&lt;/li&gt;
&lt;li&gt;GPU optimization with CPU fallback&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Step 4: External Access Configuration&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Localtunnel Setup:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install localtunnel globally
npm install -g localtunnel

# Create tunnel to production system
lt --port 7860

# Example output:
# your url is: https://all-spies-hunt.loca.lt
# Password: 31.223.4.21 (your public IP)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Alternative Tunneling:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Using ngrok
ngrok http 7860

# Using serveo
ssh -R 80:localhost:7860 serveo.net
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3&gt;Step 5: Query Examples and Testing&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Rules Queries (Turkish):&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;5 faul yapan oyuncuya ne olur?&amp;quot;
&amp;quot;Basketbol sahasının boyutları nelerdir?&amp;quot;
&amp;quot;Şut saati kuralı nasıl işler?&amp;quot;
&amp;quot;2024 yılında hangi kurallar değişti?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Rules Queries (English):&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;What happens when a player gets 5 fouls?&amp;quot;
&amp;quot;What are basketball court dimensions?&amp;quot;
&amp;quot;How does the shot clock rule work?&amp;quot;
&amp;quot;Which rules changed in 2024?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Statistics Queries (Turkish):&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;TOFAŞ maçları 2023-2024 sezonunda&amp;quot;
&amp;quot;Fenerbahçe vs Galatasaray maçları&amp;quot;
&amp;quot;BSL 2024-2025 sezon sonuçları&amp;quot;
&amp;quot;Kadın basketbol lig sonuçları&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Statistics Queries (English):&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;TOFAŞ games in 2023-2024 season&amp;quot;
&amp;quot;Show me games from BSL league&amp;quot;
&amp;quot;Basketball league standings&amp;quot;
&amp;quot;Women&#39;s basketball results&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3&gt;Step 6: API Integration and Testing&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Direct Statistics API Testing:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Test API endpoints directly
curl &amp;quot;http://localhost:8001/games/?team_name=TOFAŞ&amp;amp;limit=5&amp;quot;

# Expected response:
# [{&amp;quot;tarih&amp;quot;: &amp;quot;12.05.2024&amp;quot;, &amp;quot;team_a&amp;quot;: &amp;quot;TOFAŞ&amp;quot;, &amp;quot;team_b&amp;quot;: &amp;quot;GALATASARAY&amp;quot;, ...}]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;API Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;team_name&lt;/code&gt;: Turkish team name (TOFAŞ, FENERBAHÇE, GALATASARAY)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;season&lt;/code&gt;: Format &amp;quot;2023-2024&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;: Format &amp;quot;DD.MM.YYYY&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;limit&lt;/code&gt;: Maximum results (default 50)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Step 7: MCP Server Integration (Optional)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Model Context Protocol Setup:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Configure MCP for Claude integration
# Enables direct API access from Claude Code

class MCPServer:
    def handle_basketball_query(self, query: str):
        # Route query through production system
        return self.rag_system.process_query(query)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;MCP Configuration:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &amp;quot;mcpServers&amp;quot;: {
    &amp;quot;basketball-rag&amp;quot;: {
      &amp;quot;command&amp;quot;: &amp;quot;python&amp;quot;,
      &amp;quot;args&amp;quot;: [&amp;quot;mcp_server.py&amp;quot;],
      &amp;quot;env&amp;quot;: {
        &amp;quot;STATS_API_URL&amp;quot;: &amp;quot;http://localhost:8001&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3&gt;Step 8: Performance Optimization&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Hardware Detection:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def detect_hardware():
    if torch.cuda.is_available():
        gpu_name = torch.cuda.get_device_name(0)
        vram_gb = torch.cuda.get_device_properties(0).total_memory / 1e9
        # Optimize model selection based on VRAM
        return select_optimal_models(vram_gb)
    return default_models()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Model Selection Logic:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;8GB+ VRAM:&lt;/strong&gt; BGE-M3 embeddings + Llama 3.1 8B&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4-8GB VRAM:&lt;/strong&gt; BGE-M3 embeddings + Llama 3.1 8B Q4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;4GB VRAM:&lt;/strong&gt; MiniLM embeddings + Llama 3.1 8B Q2&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Step 9: Troubleshooting Common Issues&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Vector Database Empty:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Check database status
python -c &amp;quot;import chromadb; print(chromadb.PersistentClient(&#39;./vector_db/chroma_db&#39;).get_collection(&#39;basketball_rules&#39;).count())&amp;quot;

# If 0 documents, rebuild:
python scripts/setup_database.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Turkish Character Issues:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Ensure proper encoding in all API calls
import urllib.parse
team_name = &amp;quot;TOFAŞ&amp;quot;
encoded = urllib.parse.quote(team_name, encoding=&#39;utf-8&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;GPU Memory Issues:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Monitor GPU usage
nvidia-smi -l 1

# Clear GPU cache in Python
torch.cuda.empty_cache()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Port Conflicts:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Find and kill processes using required ports
lsof -ti:8001 | xargs kill -9
lsof -ti:7860 | xargs kill -9
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3&gt;Step 10: Production Deployment Checklist&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Pre-deployment:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Vector database populated (873 documents)&lt;/li&gt;
&lt;li&gt;[ ] Statistics database built (17,261+ games)&lt;/li&gt;
&lt;li&gt;[ ] Ollama running with Llama 3.1 8B model&lt;/li&gt;
&lt;li&gt;[ ] All dependencies installed&lt;/li&gt;
&lt;li&gt;[ ] GPU drivers configured (if applicable)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Deployment:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Production system launches successfully&lt;/li&gt;
&lt;li&gt;[ ] Both rules and stats queries working&lt;/li&gt;
&lt;li&gt;[ ] External tunnel configured&lt;/li&gt;
&lt;li&gt;[ ] Error logging active&lt;/li&gt;
&lt;li&gt;[ ] Performance monitoring enabled&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Post-deployment:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Test all query types&lt;/li&gt;
&lt;li&gt;[ ] Verify Turkish character handling&lt;/li&gt;
&lt;li&gt;[ ] Check response times (&amp;lt;3s typical)&lt;/li&gt;
&lt;li&gt;[ ] Monitor system resources&lt;/li&gt;
&lt;li&gt;[ ] Document access credentials&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;System Architecture Benefits&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Scalability:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microservice architecture (RAG + Stats API)&lt;/li&gt;
&lt;li&gt;Horizontal scaling via load balancing&lt;/li&gt;
&lt;li&gt;Database sharding for large datasets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Reliability:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic failover between components&lt;/li&gt;
&lt;li&gt;Graceful degradation when services unavailable&lt;/li&gt;
&lt;li&gt;Comprehensive error handling and logging&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Multilingual Support:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Language detection and routing&lt;/li&gt;
&lt;li&gt;Turkish/English response formatting&lt;/li&gt;
&lt;li&gt;Character encoding optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3&gt;Next Steps&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;System Enhancements:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add more sports leagues and data sources&lt;/li&gt;
&lt;li&gt;Implement user authentication and sessions&lt;/li&gt;
&lt;li&gt;Create mobile application interface&lt;/li&gt;
&lt;li&gt;Add real-time statistics streaming&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Technical Improvements:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fine-tune embedding models for domain-specific queries&lt;/li&gt;
&lt;li&gt;Implement advanced caching strategies&lt;/li&gt;
&lt;li&gt;Add A/B testing for query routing algorithms&lt;/li&gt;
&lt;li&gt;Integrate with official federation APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Production Monitoring:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up Prometheus/Grafana dashboards&lt;/li&gt;
&lt;li&gt;Implement alerting for system failures&lt;/li&gt;
&lt;li&gt;Add performance analytics and user tracking&lt;/li&gt;
&lt;li&gt;Create automated backup procedures&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Complete production system providing intelligent basketball assistance through advanced AI integration. Deployable on any Linux system with comprehensive documentation and error handling.&lt;/p&gt;
</content>
    <author>
      <name>Mert Biricik</name>
    </author>
  </entry>
  <entry>
    <title>Hello World!</title>
    <link href="https://mert.biricik.de/blog/hello_world/"/>
    <updated>2025-08-10T00:00:00Z</updated>
    <id>https://mert.biricik.de/blog/hello_world/</id>
    <content type="html">&lt;p&gt;Welcome to my new blog!&lt;/p&gt;
&lt;p&gt;This is the first post, demonstrating how easy it is to add content using Markdown files with Eleventy. I&#39;m excited to share my thoughts on full-stack development, data science, and cybersecurity here.&lt;/p&gt;
&lt;p&gt;I am planning to update here at least bi-weekly.&lt;/p&gt;
&lt;h2&gt;What&#39;s Next?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;More technical deep-dives&lt;/li&gt;
&lt;li&gt;Project showcases&lt;/li&gt;
&lt;li&gt;Thoughts on industry trends&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
</content>
    <author>
      <name>Mert Biricik</name>
    </author>
  </entry>
</feed>